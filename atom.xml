<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>闲潭个人博客</title>
  
  <subtitle>wyohoxtan</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://82u0q0.coding-pages.com/"/>
  <updated>2020-08-21T09:26:26.980Z</updated>
  <id>http://82u0q0.coding-pages.com/</id>
  
  <author>
    <name>闲潭</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop集群部署</title>
    <link href="http://82u0q0.coding-pages.com/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>http://82u0q0.coding-pages.com/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2020-08-17T08:32:33.000Z</published>
    <updated>2020-08-21T09:26:26.980Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前提条件：">一、前提条件：<a href="2020/08/17/Hadoop集群部署#一、前提条件："></a></h3><h4 id="1️⃣-版本选择问题">1️⃣ 版本选择问题<a href="2020/08/17/Hadoop集群部署#1️⃣-版本选择问题"></a></h4><ul><li>考虑因素：<ul><li>环境稳定程度</li><li>安装难易度</li><li>所考虑因素：<ul><li>是否为开源软件，即是否免费。</li><li>是否有稳定版，这个一般软件官方网站会给出说明。</li><li>是否经实践验证，这个可通过检查是否有一些大点的公司已经在生产环境中使用知道</li><li>是否有强大的社区支持，当出现一个问题时，能够通过社区、论坛等网络资源快速获取解决方法</li></ul></li></ul></li><li>考虑到大数据平台高效的部署和安装，中心化的配置管理，使用过程中的稳定性、兼容性、扩展性，以及未来较为简单、高效的运维，遇到问题低廉的解决成本。建议使用第三方发行版本，其中在第三发发行版中，国内应用较多的是Cloudera的CDH。</li></ul><h4 id="2️⃣-环境准备">2️⃣ 环境准备<a href="2020/08/17/Hadoop集群部署#2️⃣-环境准备"></a></h4><ul><li>CDH相关离线文件</li><li>Liunx三台服务器</li><li></li></ul><h4 id="3️⃣-技术选型">3️⃣ 技术选型<a href="2020/08/17/Hadoop集群部署#3️⃣-技术选型"></a></h4><ul><li>CDH版本：6.3.2</li><li>Linux ：centos7</li><li>jdk：1.8</li><li>MySQL：5.7</li><li>opentsdb</li><li>granfana</li></ul><p>4️⃣</p><h3 id="二、服务器准备">二、服务器准备<a href="2020/08/17/Hadoop集群部署#二、服务器准备"></a></h3><div class="article-bounded"><div class="article-table"><table><thead><tr><th>ip地址</th><th>主机名</th><th>角色</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>Mip1</td><td>hadoop</td><td>主</td><td>2核16G</td><td>namenode、ResourceManager、zookeeper、HMaster、Hive</td></tr><tr><td>Sip1</td><td>hadoop1</td><td>从</td><td>2核16G</td><td>datanode、NodeManager、zookeeper、HRegionServer、Spark</td></tr><tr><td>Sip2</td><td>hadoop2</td><td>从</td><td>2核16G</td><td>datanode、NodeManager、zookeeper、HRegionServer、Spark</td></tr></tbody></table></div></div><h3 id="三、CDH安装文件">三、CDH安装文件<a href="2020/08/17/Hadoop集群部署#三、CDH安装文件"></a></h3><blockquote><p>1、cloudera manager包 </p><p><a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/" target="_blank" rel="noopener">https://archive.cloudera.com/cdh6/6.3.2/parcels/</a></p><p>①<a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel" target="_blank" rel="noopener">CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel</a></p><p>②<a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha1" target="_blank" rel="noopener"> CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha1</a></p><p>③ <a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/manifest.json" target="_blank" rel="noopener">manifest.json</a></p></blockquote><h3 id="四、开始安装前配置和预装软件">四、开始安装前配置和预装软件<a href="2020/08/17/Hadoop集群部署#四、开始安装前配置和预装软件"></a></h3><ul><li><h5 id="安装jdk（每台都需安装）"><a href="2020/08/17/Hadoop集群部署#安装jdk（每台都需安装）" class="headerlink" title="安装jdk（每台都需安装）"></a>安装jdk（每台都需安装）</h5><ul><li><h6 id="验证是否安装jdk-java-version"><a href="2020/08/17/Hadoop集群部署#验证是否安装jdk-java-version" class="headerlink" title="验证是否安装jdk java -version"></a>验证是否安装jdk java -version</h6></li><li><h6 id="本地文件传入到服务器中"><a href="2020/08/17/Hadoop集群部署#本地文件传入到服务器中" class="headerlink" title="本地文件传入到服务器中"></a>本地文件传入到服务器中</h6></li><li><h6 id="安装jdk"><a href="2020/08/17/Hadoop集群部署#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h6><ul><li><p>解压：<code>tar -zxvf jdk-8u181-linux-x64.tar.gz</code></p></li><li><p><code>ls</code></p></li><li><p>修改文件名：<code>mv jdk1.8.0_181 jdk1.8</code></p></li><li><p><font color="red">※</font>创建java文件夹 <code>mkdir /usr/java</code></p></li><li><p>将jdk移动到新创建的java文件夹中 <code>mv jdk1.8 /usr/java</code></p></li><li><p>配置环境变量：<code>vi /etc/profile</code></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># set java environment</span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/java/jdk1.8<span class="token function">export</span> JRE_HOME<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib:<span class="token variable">$CLASSPATH</span><span class="token function">export</span> JAVA_PATH<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token variable">${JRE_HOME}</span>/bin<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">${JAVA_PATH}</span></code></pre></li><li><p>环境变量立即生效 <code>source /etc/profile</code></p></li><li><p>验证是否生效  <code>java -version</code></p></li></ul></li></ul></li><li><h5 id="修改服务器的有关配置（每台机器均需配置）"><a href="2020/08/17/Hadoop集群部署#修改服务器的有关配置（每台机器均需配置）" class="headerlink" title="修改服务器的有关配置（每台机器均需配置）"></a>修改服务器的有关配置（每台机器均需配置）</h5><ul><li><h6 id="SSH无密码登录配置-所有节点相互免秘钥"><a href="2020/08/17/Hadoop集群部署#SSH无密码登录配置-所有节点相互免秘钥" class="headerlink" title="SSH无密码登录配置(所有节点相互免秘钥)"></a>SSH无密码登录配置(所有节点相互免秘钥)</h6><blockquote><p><strong>思路</strong>：</p><p>第一台机器生成秘钥文件id_rsa.pub，拷贝到其它机器，然后所有机器把此秘钥追加到自己的authorized_keys中，</p><p>第二台机器生成秘钥文件id_rsa.pub，拷贝到其它机器，然后所有机器把此秘钥追加到自己的authorized_keys中，</p><p>以此类推。</p></blockquote><ul><li><p>生成秘钥文件</p><ul><li>ssh-keygen -t rsa</li><li>cd /root/.ssh</li><li>ls</li></ul></li><li><p>追加到自己的authorized_keys中</p><ul><li>cat id_rsa.pub &gt;&gt; authorized_keys</li></ul></li><li><p>赋权</p><ul><li>chmod 700 /root/.ssh</li><li>chmod 600 authorized_keys</li></ul></li><li><p>拷贝秘钥文件</p><ul><li>将s1，s2中的authorized_keys中的内容拷贝到m中的authorized_keys中</li><li>scp /root/.ssh/authorized_keys root@Sip1:/root/.ssh/authorized_keys  将m中的秘钥添加到s1中</li><li>scp /root/.ssh/authorized_keys root@Sip2:/root/.ssh/authorized_keys  将m中的秘钥添加到s2中</li></ul></li><li><p>问题：</p><p> ① ssh无法连接成功 read: Connection reset by peer</p><ul><li><p>echo “”&gt;authorized_keys  清空文件内容</p></li><li><p>通过 ssh -v localhost 仍然无法连接本机ssh</p></li><li><p>删除ssh  rm -rf .ssh</p></li><li><p>ssh_exchange_identification: read: Connection reset by peer</p><ul><li>通过 vi /etc/hosts.allow  </li><li>修改 sshd配置  sshd:ALL ##允许所有ip主机均能连接本机</li><li>保存</li><li>再通过ssh root@ip试试能否可行</li></ul><p>② ping无法成功</p><p><font color="red">※</font>经核实，通过ping内网可完成服务器之间的互通，因此hosts文件均需使用内网信息</p></li><li><p>通过<code>ifconfig -a</code> 获取ip内网相关信息</p></li></ul></li></ul></li><li><h6 id="host修改"><a href="2020/08/17/Hadoop集群部署#host修改" class="headerlink" title="host修改"></a>host修改</h6><ul><li><p>执行： vi /etc/hosts</p></li><li><p>添加ip以及集群名称：</p><blockquote><p>192.168.0.1 master</p><p>192.168.0.2 slave1</p><p>192.168.0.3 slave2</p><p>scp /etc/hosts  <a href="mailto:root@192.168.0.2" target="_blank" rel="noopener">root@192.168.0.2</a>:/etc/hosts</p><p>scp /etc/hosts  <a href="mailto:root@192.168.0.3" target="_blank" rel="noopener">root@192.168.0.3</a>:/etc/hosts</p></blockquote></li><li><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改hostname</span>vim /etc/sysconfig/networkNETWORKING<span class="token operator">=</span>yesHOSTNAME<span class="token operator">=</span>master<span class="token comment" spellcheck="true">#</span>vim /etc/hostname<span class="token comment" spellcheck="true"># 各自服务器修改服务名</span></code></pre></li><li><p>重启服务器 reboot</p></li></ul></li><li><h6 id="selinux关闭"><a href="2020/08/17/Hadoop集群部署#selinux关闭" class="headerlink" title="selinux关闭"></a>selinux关闭</h6><ul><li>sestatus -v</li></ul></li><li><h6 id="关闭防火墙"><a href="2020/08/17/Hadoop集群部署#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h6><ul><li>systemctl status firewalld</li></ul></li></ul></li><li><h5 id="NTP服务器设置"><a href="2020/08/17/Hadoop集群部署#NTP服务器设置" class="headerlink" title="NTP服务器设置"></a>NTP服务器设置</h5><ul><li>查看当前时间  date -R</li></ul></li><li><h5 id="安装MySQL-主"><a href="2020/08/17/Hadoop集群部署#安装MySQL-主" class="headerlink" title="安装MySQL(主)"></a>安装MySQL(主)</h5><ul><li><h6 id="centos7自带的是mariadb，需要先卸载掉"><a href="2020/08/17/Hadoop集群部署#centos7自带的是mariadb，需要先卸载掉" class="headerlink" title="centos7自带的是mariadb，需要先卸载掉"></a>centos7自带的是mariadb，需要先卸载掉</h6><ul><li>rpm -qa|grep mariadb</li><li>rpm -e –nodeps mariadb-libs-5.5.64-1.el7.x86_64</li></ul></li><li><h6 id="下载mysql，将其上传到服务器中"><a href="2020/08/17/Hadoop集群部署#下载mysql，将其上传到服务器中" class="headerlink" title="下载mysql，将其上传到服务器中"></a>下载mysql，将其上传到服务器中</h6><ul><li><a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL官网</a> 选择版本</li></ul></li><li><h6 id="将下载的mysql进行解压"><a href="2020/08/17/Hadoop集群部署#将下载的mysql进行解压" class="headerlink" title="将下载的mysql进行解压"></a>将下载的mysql进行解压</h6><ul><li><p>下载tar包：(<strong><font color="red">不用mysql8版本，使用mysql5.7</font></strong>)</p><p>wget <a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-linux-glibc2.12-x86_64.tar.gz" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-linux-glibc2.12-x86_64.tar.gz</a></p></li><li><p>创建文件夹</p><ul><li>mkdir /usr/local/mysql</li></ul></li><li><p>移动tar包 (mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz)</p><ul><li>mv mysql-8.0.11-linux-glibc2.12-x86_64.tar.gz /usr/local/mysql/mysql-8.0.11-linux-glibc2.12-x86_64.tar.gz</li></ul></li><li><p>进入文件夹：cd /usr/local/mysql</p></li><li><p>解压： tar -zxvf mysql-8.0.11-linux-glibc2.12-x86_64.tar.gz</p></li><li><p>重命名： mv mysql-8.0.11-linux-glibc2.12-x86_64 mysql8.0</p></li><li><p>创建data文件夹 </p><ul><li>cd /usr/local/mysql/mysql8.0/</li><li>mkdir ./data</li></ul></li></ul></li><li><h6 id="创建用户和用户组"><a href="2020/08/17/Hadoop集群部署#创建用户和用户组" class="headerlink" title="创建用户和用户组"></a>创建用户和用户组</h6><ul><li>用户组： groupadd mysql</li><li>用户：useradd -g mysql mysql</li><li>授权：<ul><li>chown -R mysql:mysql /usr/local/mysql</li><li>chmod -R 755 /usr/local/mysql</li></ul></li></ul></li><li><h6 id="初始化数据库"><a href="2020/08/17/Hadoop集群部署#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h6><ul><li>cd bin</li><li>./mysqld –initialize –user=mysql –datadir=/usr/local/mysql/mysql8.0/data –basedir=/usr/local/mysql/mysql8.0</li><li>得到临时密码： L3Hok!e#F3yP  i2yiwKW7?irs</li></ul></li><li><p>进入mysql5/support-files </p><ul><li>修改配置文件路径 </li><li>cp /usr/local/mysql/mysql5/my-default.cnf /etc/my.cnf</li></ul></li><li><h6 id="编辑配置文件my-cnf，添加配置如下"><a href="2020/08/17/Hadoop集群部署#编辑配置文件my-cnf，添加配置如下" class="headerlink" title="编辑配置文件my.cnf，添加配置如下"></a>编辑配置文件my.cnf，添加配置如下</h6><ul><li><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  vi /etc/my.cnf</span></code></pre></li></ul><p>[mysqld]<br>datadir=/usr/local/mysql/mysql5/data<br>port=3306<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br>symbolic-links=0<br>max_connections=600<br>innodb_file_per_table=1<br>lower_case_table_names=1</p><pre><code></code></pre></li><li><h6 id="建立MySQL服务"><a href="2020/08/17/Hadoop集群部署#建立MySQL服务" class="headerlink" title="建立MySQL服务"></a>建立MySQL服务</h6><ul><li><p># 添加Mysql到系统服务<br>cp -a ./support-files/mysql.server /etc/init.d/mysql</p></li><li><p>chmod +x /etc/init.d/mysql<br>chkconfig –add mysql<br># 检查服务是否生效<br>chkconfig –list mysql</p><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/mysqlLogA.png" alt="mysqlLogA" style="zoom:50%;"></li><li><p>启动mysql服务</p><ul><li>service mysql start 或者 support-files/mysql.server start<ul><li>./support-files/mysql.server:行239: my_print_defaults: 未找到命令</li><li>原因：因为没有修改mysql的配置文件</li><li>修改文件 vim support-files/mysql.server</li></ul></li><li>service mysql status    –查看mysql的状态</li></ul></li></ul></li><li><h6 id="登录MySQL"><a href="2020/08/17/Hadoop集群部署#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h6><ul><li><p>mysql -uroot -p</p><ul><li><p>-bash: mysql: 未找到命令</p></li><li><p>配置系统文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># set java environment</span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/java/jdk1.8<span class="token function">export</span> JRE_HOME<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre<span class="token function">export</span> MYSQL_HOME<span class="token operator">=</span>/usr/local/mysql/mysql8.0<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib:<span class="token variable">$CLASSPATH</span><span class="token function">export</span> JAVA_PATH<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token variable">${JRE_HOME}</span>/bin<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${MYSQL_HOME}</span>/bin:<span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">${JAVA_PATH}</span></code></pre></li></ul></li><li><p>登录存在问题：</p><ul><li><p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)</p><ul><li><p>有可能是 my.cnf 配置文件中设置了 [mysqld] 的参数 socket ，而没有设置[client]的参数socket</p><p>mysql.sock 文件有什么用：</p><p>mysql 支持 socket 和 TCP/IP 连接。那么 mysql.sock 这个文件有什么用呢？连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。/tmp 文件夹属于临时文件，随时可能被删除。</p></li><li><p>MySQL将其放在/tmp目录，而linux将其放在/var/mysql目录。所以我们只需要创建一个软链接，输入以下两个命令即可：<br>如果/var/下没有mysql目录，则需创建</p><p>创建目录：sudo mkdir /var/mysql</p><p>创建软链接：sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock</p><p>如果提示： ln: creating symbolic link <code>/data/mysqldata/mysql.sock&#39; to</code>/tmp/mysql.sock’: File exists<br>删除之前的mysql.sock文件</p></li><li><p>解决办法：</p><ul><li><p>创建软连接</p></li><li><p>my.cnf文件中添加client信息</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>datadir<span class="token operator">=</span>/usr/local/mysql/mysql8.0/dataport<span class="token operator">=</span>3306sql_mode<span class="token operator">=</span>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLESsymbolic-links<span class="token operator">=</span>0max_connections<span class="token operator">=</span>600innodb_file_per_table<span class="token operator">=</span>1lower_case_table_names<span class="token operator">=</span>1socket<span class="token operator">=</span>/var/mysql/mysql.sock<span class="token punctuation">[</span>client<span class="token punctuation">]</span>port<span class="token operator">=</span>3306socket<span class="token operator">=</span>/var/mysql/mysql.sock</code></pre></li></ul></li></ul></li></ul></li></ul></li><li><h6 id="登录成功后，修改临时密码"><a href="2020/08/17/Hadoop集群部署#登录成功后，修改临时密码" class="headerlink" title="登录成功后，修改临时密码"></a>登录成功后，修改临时密码</h6><pre class=" language-mysql"><code class="language-mysql"> SET PASSWORD FOR 'root'@'localhost'= "RootXXX"</code></pre></li><li><h6 id="开放3306端口允许使用用户名root从任何主机连接到mysql服务器"><a href="2020/08/17/Hadoop集群部署#开放3306端口允许使用用户名root从任何主机连接到mysql服务器" class="headerlink" title="开放3306端口允许使用用户名root从任何主机连接到mysql服务器"></a>开放3306端口允许使用用户名root从任何主机连接到mysql服务器</h6><pre class=" language-mysql"><code class="language-mysql">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'RootXXXNEW' WITH GRANT OPTION;</code></pre><ul><li><p>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘IDENTIFIED BY ‘RootXXXNEW’ WITH GRANT OPTION’ at line 1</p></li><li><p>MySQL8的使用方式不一样</p><ul><li><p>在 my.cnf 中 添加： <code>default_authentication_plugin=mysql_native_password</code></p></li><li><pre class=" language-mysql"><code class="language-mysql">CREATE USER 'root'@'%' IDENTIFIED BY 'Root-NewXXX';//这个操作是mysql 8.0中得加的GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'WITH GRANT OPTION;//任何远程主机都可以访问数据库 FLUSH PRIVILEGES; //需要输入次命令使修改生效 </code></pre></li></ul></li></ul></li><li><h6 id="建数据库-用于后边组件安装）"><a href="2020/08/17/Hadoop集群部署#建数据库-用于后边组件安装）" class="headerlink" title="建数据库(用于后边组件安装）"></a>建数据库(用于后边组件安装）</h6><pre class=" language-mysql"><code class="language-mysql"># 集群监控数据库create database amon DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;# hive数据库create database hive DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;# oozie数据库create database oozie DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;# hue数据库create database hue DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre></li></ul></li></ul><ul><li><h5 id="perl服务安装（全部节点）"><a href="2020/08/17/Hadoop集群部署#perl服务安装（全部节点）" class="headerlink" title="perl服务安装（全部节点）"></a>perl服务安装（全部节点）</h5><ul><li>yum install perl</li></ul></li></ul><h3 id="五、安装">五、安装<a href="2020/08/17/Hadoop集群部署#五、安装"></a></h3><ul><li><h5 id="安装Cloudera-Manager和CDH（主机器）"><a href="2020/08/17/Hadoop集群部署#安装Cloudera-Manager和CDH（主机器）" class="headerlink" title="安装Cloudera Manager和CDH（主机器）"></a>安装Cloudera Manager和CDH（主机器）</h5><ul><li><h6 id="将下载好的cloudera-manager-centos7-cm5-16-1-x86-64-tar-gz解压到主节点的-opt-解压出来的文件夹为cloudera与cm-5-16-1"><a href="2020/08/17/Hadoop集群部署#将下载好的cloudera-manager-centos7-cm5-16-1-x86-64-tar-gz解压到主节点的-opt-解压出来的文件夹为cloudera与cm-5-16-1" class="headerlink" title="将下载好的cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz解压到主节点的/opt,解压出来的文件夹为cloudera与cm-5.16.1"></a>将下载好的cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz解压到主节点的/opt,解压出来的文件夹为cloudera与cm-5.16.1</h6><ul><li><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -axvf cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz -C /opt</code></pre></li></ul></li><li><h6 id="将Parcels相关文件拷贝到相应文件夹中"><a href="2020/08/17/Hadoop集群部署#将Parcels相关文件拷贝到相应文件夹中" class="headerlink" title="将Parcels相关文件拷贝到相应文件夹中"></a>将Parcels相关文件拷贝到相应文件夹中</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel /opt/cloudera/parcel-repo/ <span class="token function">cp</span> CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha /opt/cloudera/parcel-repo/ <span class="token function">cp</span> manifest.json /opt/cloudera/parcel-repo/</code></pre></li><li><h6 id="修改-config-ini-，同步agent到所有节点中"><a href="2020/08/17/Hadoop集群部署#修改-config-ini-，同步agent到所有节点中" class="headerlink" title="修改 config.ini ，同步agent到所有节点中"></a>修改 config.ini ，同步agent到所有节点中</h6><ul><li><p>vi /opt/cm-5.16.1/etc/cloudera-scm-agent/config.ini</p></li><li><p>修改 server_host = master</p></li><li><p>保存退出</p></li><li><p>将相关文件同步到各个节点中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> -r /opt/cm-5.16.1  root@slave1:/opt/<span class="token function">scp</span> -r /opt/cm-5.16.1  root@slave2:/opt/</code></pre></li></ul></li><li><h6 id="所有节点都建立-cloudera-scm-用户"><a href="2020/08/17/Hadoop集群部署#所有节点都建立-cloudera-scm-用户" class="headerlink" title="所有节点都建立 cloudera-scm 用户"></a>所有节点都建立 cloudera-scm 用户</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> --system --home<span class="token operator">=</span>/opt/cm-5.16.1/run/cloudera-scm-server/ --no-create-home --shell<span class="token operator">=</span>/bin/false --comment <span class="token string">"Cloudera SCM User"</span> cloudera-scm</code></pre><ul><li><p><font color="red">※</font>如果是在以前的系统上操作的话，例如，以前安装的是CDH5.13.x，现在要安装CDH5.16.1版本,那么创建新的用户也要基于新版本的CDH 进行创建 cloudera-scm 用户。首先要先删除已经存在的 cloudera-scm 用户，然后重新创建</p></li><li><pre class=" language-bash"><code class="language-bash"><span class="token function">userdel</span> cloudera-scm</code></pre></li></ul></li><li><h6 id="配置CM的数据库"><a href="2020/08/17/Hadoop集群部署#配置CM的数据库" class="headerlink" title="配置CM的数据库"></a>配置CM的数据库</h6><ul><li><p>导入mysql-connector-java.jar到相应文件目录中</p><ul><li><p>拷贝mysql jar文件到目录 /usr/share/java/</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/share/java/</code></pre></li><li><p>cp mysql-connector-java-8.0.16.jar /usr/share/java/</p></li><li><p>mv /usr/share/java/mysql-connector-java-8.0.16.jar /usr/share/java/mysql-connector-java.jar</p></li><li><p><font color="red">※</font>注意jar包名称要修改为mysql-connector-java.jar</p></li></ul></li><li><p>将mysql jdbc driver放入CM的lib中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> mysql-connector-java-8.0.16.jar  /opt/cm-5.16.1/share/cmf/lib/</code></pre></li><li><p>主节点初始化cloudera-manager脚本</p><pre class=" language-bash"><code class="language-bash">/opt/cm-5.16.1/share/cmf/schema/scm_prepare_database.sh mysql -hlocalhost -uroot -pRoot-123 --scm-host localhost scm scm scm</code></pre><pre class=" language-markdown"><code class="language-markdown">/opt/cm-5.16.1/share/cmf/schema/scm<span class="token italic"><span class="token punctuation">_</span>prepare<span class="token punctuation">_</span></span>database.sh mysql -hmaster -uroot -pRoot-123 --scm-host master scm scm scm说明：这个脚本就是用来创建和配置CMS需要的数据库的脚本。各参数是指：mysql：数据库用的是mysql，如果安装过程中用的oracle，那么该参数就应该改为oracle。-hmaster：数据库建立在master主机上面。也就是主节点上面。-<span class="token title important">uroot：root身份运行mysql。-123456：mysql的root密码是***。<span class="token punctuation">--</span></span>scm-host master：CMS的主机，一般是和mysql安装的主机是在同一个主机上。最后三个参数是：数据库名，数据库用户名，数据库密码。</code></pre><p><strong>注意:如果执行的时候报一下错误,可能是配置host的有问题，127.0.0.1 localhost.master 这个localhost不能少</strong></p><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/errorCDH.png" alt="errorCDH" style="zoom:50%;"><ul><li>ERROR com.cloudera.enterprise.dbutil.DbProvisioner  - Exception when creating/dropping database with user ‘root’ and jdbc url ‘jdbc:mysql://localhost/?useUnicode=true&amp;characterEncoding=UTF-8’</li><li>解决：在hosts文件中，修改 127.0.0.1 master master   其他节点也需修改</li></ul><p><font color="red">※</font>如果是在以前的系统上操作的话，例如，以前安装的是CDH5.13.x，现在要安装CDH5.16.1版本，而是用的还是以前的 MySQL 那么，要先删除 msyql 中已经存在的 scm 数据库，否则会报数据库已经存在，不能被创建。</p><ul><li>存在无法初始化成功的问题：</li></ul><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/cdhInstallScmException.png" alt="cdhInstallScmException" style="zoom:50%;"></li></ul></li></ul></li></ul><pre><code>  - 将mysql-connector-java.jar传入到相应文件夹中</code></pre><ul><li><h6 id="启动Server，agent服务"><a href="2020/08/17/Hadoop集群部署#启动Server，agent服务" class="headerlink" title="启动Server，agent服务"></a>启动Server，agent服务</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启服务 必须先启动  Agent   再启动server</span><span class="token comment" spellcheck="true">#主节点及其他节点</span>/opt/cm-5.16.1/etc/init.d/cloudera-scm-agent start<span class="token comment" spellcheck="true">#主节点</span>/opt/cm-5.16.1/etc/init.d/cloudera-scm-server start</code></pre><p>问题：cloudera-scm-server 已死，但 pid 文件存在</p><ul><li><p>cd /opt/cm-5.16.1/log/cloudera-scm-server</p></li><li><p>/opt/cm-5.16.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hmaster -uroot -pRoot-123  –scm-host master scm scm scm</p></li><li><p>依旧存在上述报错问题</p><blockquote><p>不同版本mysql，语法有点出入，<br> 原来5.7：<br> <code>GRANT ALL ON itat_shop.* to &#39;itat&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;itat123&#39;;</code><br> mysql-8.0.11-winx64：<br> <code>GRANT ALL ON itat_shop.* to &#39;itat&#39;@&#39;localhost&#39;</code>即可。</p></blockquote></li><li><pre class=" language-mysql"><code class="language-mysql">CREATE USER 'scm'@'%' IDENTIFIED BY 'Root-123scm';GRANT ALL PRIVILEGES ON *.* TO 'scm'@'%'WITH GRANT OPTION;FLUSH PRIVILEGES;</code></pre></li><li><p>一直初始化存在问题，可能由于MySQL的jar版本问题，mysql8版本过高？？？</p><ul><li><p>通过核实，CDH5 和 CDH6 仅支持mysql5版本</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cloudera对JAVA mysql 操作系统均有要求 详情可以参考下面官方文档</span>https://docs.cloudera.com/documentation/enterprise/release-notes/topics/rn_consolidated_pcm.html<span class="token comment" spellcheck="true">#cdh_cm_supported_os</span>https://docs.cloudera.com/documentation/enterprise/release-notes/topics/rn_consolidated_pcm.html<span class="token comment" spellcheck="true">#cdh_cm_supported_db</span>https://docs.cloudera.com/documentation/enterprise/release-notes/topics/rn_consolidated_pcm.html<span class="token comment" spellcheck="true">#pcm_jdk</span></code></pre></li></ul></li></ul></li><li><h6 id="修改mysql的版本，删除之前的mysql版本"><a href="2020/08/17/Hadoop集群部署#修改mysql的版本，删除之前的mysql版本" class="headerlink" title="修改mysql的版本，删除之前的mysql版本"></a>修改mysql的版本，删除之前的mysql版本</h6><ul><li><p>停止服务</p><ul><li>service mysql start</li></ul></li><li><p>查看mysql服务器</p><ul><li>rpm -qa | grep mysql</li><li>通过 rpm -e –nodeps 卸载所有mysql服务</li></ul></li><li><p>删除残余文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -rf /etc/my.cnf<span class="token function">rm</span> -rf /usr/lib/mysql<span class="token function">rm</span> -rf /usr/lib64/mysql<span class="token function">rm</span> -rf /usr/include/mysql<span class="token function">rm</span> -rf /usr/share/mysql<span class="token function">rm</span> -rf /var/log/mysqld.log<span class="token function">rm</span> -rf /var/lib/mysql</code></pre></li><li><p>重新安装mysql </p></li><li><p>vi /etc/my.cnf</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Remove leading # and set to the amount of RAM for the most important data</span><span class="token comment" spellcheck="true"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><span class="token comment" spellcheck="true"># innodb_buffer_pool_size = 128M</span><span class="token comment" spellcheck="true"># Remove leading # to turn on a very important data integrity option: logging</span><span class="token comment" spellcheck="true"># changes to the binary log between backups.</span>log_bin<span class="token operator">=</span>/var/lib/mysql/mysql_binary_log<span class="token comment" spellcheck="true"># These are commonly set, remove the # and set as required.</span> basedir <span class="token operator">=</span>/usr/local/mysql/mysql5 datadir <span class="token operator">=</span>/usr/local/mysql/mysql5/data port <span class="token operator">=</span>3306<span class="token comment" spellcheck="true"># server_id = .....</span> socket <span class="token operator">=</span>/var/mysql/mysql.sock<span class="token comment" spellcheck="true"># Remove leading # to set options mainly useful for reporting servers.</span><span class="token comment" spellcheck="true"># The server defaults are faster for transactions and fast SELECTs.</span><span class="token comment" spellcheck="true"># Adjust sizes as needed, experiment to find the optimal values.</span> read_buffer_size <span class="token operator">=</span> 2M join_buffer_size <span class="token operator">=</span> 128M sort_buffer_size <span class="token operator">=</span> 8M read_rnd_buffer_size <span class="token operator">=</span> 16Msql_mode<span class="token operator">=</span>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLESkey_buffer_size <span class="token operator">=</span> 32Mmax_allowed_packet <span class="token operator">=</span> 32Mthread_stack <span class="token operator">=</span> 256Kthread_cache_size <span class="token operator">=</span> 64query_cache_limit <span class="token operator">=</span> 8Mquery_cache_size <span class="token operator">=</span> 64Mquery_cache_type <span class="token operator">=</span> 1max_connections <span class="token operator">=</span> 550<span class="token punctuation">[</span>client<span class="token punctuation">]</span>port<span class="token operator">=</span>3306socket<span class="token operator">=</span>/var/mysql/mysql.sock<span class="token punctuation">[</span>mysqld_safe<span class="token punctuation">]</span>log-error<span class="token operator">=</span>/var/log/mysqld.logpid-file<span class="token operator">=</span>/var/run/mysqld/mysqld.pidsql_mode<span class="token operator">=</span>STRICT_ALL_TABLES</code></pre></li></ul></li></ul><pre><code>- mysql: [ERROR] unknown variable &#39;innodb_file_per_table=1&#39;    - 删除my.cnf中的innodb配置- ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/mysql/mysql.sock&#39; (2)  - 启动mysql- The server quit without updating PID file (/[FAILED]l/mysql/mysql5/data/master.pid  - 通过核实查看 cat /var/log/mysqld.log  - [ERROR] You have enabled the binary log, but you haven&#39;t provided the mandatory server-id. Please refer to the proper server start-up parameters documentation    - 在设置bin log日志的时候，没有设置server_id参数。server-id参数用于在复制中，为主库和备库提供一个独立的ID，以区分主库和备库；开启二进制文件的时候，需要设置这个参数。  - Could not create unix socket lock file /var/mysql/mysql.sock.lock.    - chown -R mysql:mysql /var/mysql/- 启动cloudera的server agent相关服务- 启动需要点时间，可以查看数据库scm中的hosts表，如果里面出现节点信息表示server启动完成</code></pre><ul><li><h5 id="安装Hadoop集群"><a href="2020/08/17/Hadoop集群部署#安装Hadoop集群" class="headerlink" title="安装Hadoop集群"></a>安装Hadoop集群</h5><ul><li><h6 id="登录http-119-3-29-51-7180-默认登录用户名和密码都是admin"><a href="2020/08/17/Hadoop集群部署#登录http-119-3-29-51-7180-默认登录用户名和密码都是admin" class="headerlink" title="登录http://119.3.29.51/:7180,默认登录用户名和密码都是admin"></a>登录<a href="http://119.3.29.51/:7180,默认登录用户名和密码都是admin" target="_blank" rel="noopener">http://119.3.29.51/:7180,默认登录用户名和密码都是admin</a></h6><ul><li>无法访问华为云<ul><li>在华为云平台管理后台中添加安全策略。</li></ul></li></ul></li><li><h6 id="勾选用户协议，进行下一步"><a href="2020/08/17/Hadoop集群部署#勾选用户协议，进行下一步" class="headerlink" title="勾选用户协议，进行下一步"></a>勾选用户协议，进行下一步</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallA.png" alt="CDHinstallA" style="zoom:30%;"></li><li><h6 id="选择免费版本，继续"><a href="2020/08/17/Hadoop集群部署#选择免费版本，继续" class="headerlink" title="选择免费版本，继续"></a>选择免费版本，继续</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallB.png" alt="CDHinstallB" style="zoom:30%;"></li><li><h6 id="下一步"><a href="2020/08/17/Hadoop集群部署#下一步" class="headerlink" title="下一步"></a>下一步</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallC.png" alt="CDHinstallC" style="zoom:30%;"></li><li><h6 id="选择本地服务器，全勾选，继续"><a href="2020/08/17/Hadoop集群部署#选择本地服务器，全勾选，继续" class="headerlink" title="选择本地服务器，全勾选，继续"></a>选择本地服务器，全勾选，继续</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallD.png" alt="CDHinstallD" style="zoom:30%;"></li></ul><p>​       ❎ 在本机集群中无法正确显示ip地址以及hostname</p><p>​              解决：修改<strong>每个节点</strong>中的hosts文件，<strong>注释</strong> 127.0.0.1 hostname 两行配置</p><ul><li><h6 id="选择离线CDH版本，继续"><a href="2020/08/17/Hadoop集群部署#选择离线CDH版本，继续" class="headerlink" title="选择离线CDH版本，继续"></a>选择离线CDH版本，继续</h6></li><li><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallE.png" alt="CDHinstallE" style="zoom:30%;"></li><li><h6 id="等待安装Parcel"><a href="2020/08/17/Hadoop集群部署#等待安装Parcel" class="headerlink" title="等待安装Parcel"></a>等待安装Parcel</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallF.png" alt="CDHinstallF" style="zoom:30%;"></li><li><h6 id="继续下一步，自动检测主机正确性"><a href="2020/08/17/Hadoop集群部署#继续下一步，自动检测主机正确性" class="headerlink" title="继续下一步，自动检测主机正确性"></a>继续下一步，自动检测主机正确性</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallG.png" alt="CDHinstallG" style="zoom:30%;"><ul><li><p>禁用大页面.（每台主机都要做）</p><blockquote><ol><li>执行命令：<br>echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag<br>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</li><li>执行命令，修改配置：<br>vim /etc/rc.local<br>增加两行：<br>echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag<br>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</li><li>执行命令，赋予权限<br>chmod +x /etc/rc.d/rc.local</li></ol></blockquote></li></ul></li><li><h6 id="自定义安装"><a href="2020/08/17/Hadoop集群部署#自定义安装" class="headerlink" title="自定义安装"></a>自定义安装</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallH.png" alt="CDHinstallH" style="zoom:30%;"><p>​       <img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallI.png" alt="CDHinstallI" style="zoom:30%;"> </p></li><li><h6 id="默认角色分配。（若存在弹框提示，多返回几次，再继续即可）"><a href="2020/08/17/Hadoop集群部署#默认角色分配。（若存在弹框提示，多返回几次，再继续即可）" class="headerlink" title="默认角色分配。（若存在弹框提示，多返回几次，再继续即可）"></a>默认角色分配。（若存在弹框提示，多返回几次，再继续即可）</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallJ.png" alt="CDHinstallJ" style="zoom:30%;"></li><li><h6 id="数据库连接-hive"><a href="2020/08/17/Hadoop集群部署#数据库连接-hive" class="headerlink" title="数据库连接 hive"></a>数据库连接 hive</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallK.png" alt="CDHinstallK" style="zoom:30%;"><ul><li><p>测试Hive连接时，提示： Unable to connect to database on host ‘master’ from host ‘maste</p><ul><li><p>进入mysql数据库，进行重新授权，并刷新</p></li><li><pre class=" language-mysql"><code class="language-mysql">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'RootXXX' WITH GRANT OPTION;FLUSH PRIVILEGES;</code></pre></li></ul></li></ul></li><li><h6 id="自动安装相关配置"><a href="2020/08/17/Hadoop集群部署#自动安装相关配置" class="headerlink" title="自动安装相关配置"></a>自动安装相关配置</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallO.png" alt="CDHinstallO" style="zoom:30%;"></li><li><h6 id="安装成功"><a href="2020/08/17/Hadoop集群部署#安装成功" class="headerlink" title="安装成功"></a>安装成功</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallP.png" alt="CDHinstallP" style="zoom:30%;"></li><li><h6 id="最终界面展示"><a href="2020/08/17/Hadoop集群部署#最终界面展示" class="headerlink" title="最终界面展示"></a>最终界面展示</h6><img src="/2020/08/17/Hadoop%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/CDHinstallQ.png" alt="CDHinstallQ" style="zoom:30%;"></li></ul></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前提条件：&quot;&gt;一、前提条件：&lt;a href=&quot;2020/08/17/Hadoop集群部署#一、前提条件：&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;1️⃣-版本选择问题&quot;&gt;1️⃣ 版本选择问题&lt;a href=&quot;2020/08/17/Hadoop集群部署#1️⃣-版本
      
    
    </summary>
    
    
      <category term="大数据" scheme="http://82u0q0.coding-pages.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://82u0q0.coding-pages.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>闲潭小记</title>
    <link href="http://82u0q0.coding-pages.com/2020/08/11/%E9%97%B2%E6%BD%AD%E5%B0%8F%E8%AE%B0/"/>
    <id>http://82u0q0.coding-pages.com/2020/08/11/%E9%97%B2%E6%BD%AD%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-08-11T02:16:37.000Z</published>
    <updated>2020-08-17T06:52:59.822Z</updated>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;

      
    
    </summary>
    
    
      <category term="闲潭" scheme="http://82u0q0.coding-pages.com/categories/%E9%97%B2%E6%BD%AD/"/>
    
    
      <category term="小记" scheme="http://82u0q0.coding-pages.com/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署到Coding</title>
    <link href="http://82u0q0.coding-pages.com/2020/08/05/hexo%E9%83%A8%E7%BD%B2%E5%88%B0Coding/"/>
    <id>http://82u0q0.coding-pages.com/2020/08/05/hexo%E9%83%A8%E7%BD%B2%E5%88%B0Coding/</id>
    <published>2020-08-05T08:44:38.000Z</published>
    <updated>2020-08-17T06:54:44.699Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="wyohoxtanBlog"><a href="http://82u0q0.coding-pages.com/">wyohoxtanBlog</a><a href="2020/08/05/hexo部署到Coding#wyohoxtanBlog"></a></h3><p>部署到<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>的原因：国内的访问速度够快，可以提交<a href="http://www.webmasterhome.cn/seo/addurl.asp" target="_blank" rel="noopener">百度收录</a>（GitHub 禁止了百度的爬取）</p><p>ps: 最近一段时间的中美冲突，对应的国外的地区主义冒头，感觉github会存在各种加载以及限制问题。因此考虑将自身博客相关内容放入Coding中进行DevOps管理。</p><hr><h3 id="1、创建项目">1、创建项目<a href="2020/08/05/hexo部署到Coding#1、创建项目"></a></h3><ul><li><h4 id="进入Coding官网-点击免费使用-进行注册登录"><a href="2020/08/05/hexo部署到Coding#进入Coding官网-点击免费使用-进行注册登录" class="headerlink" title="进入Coding官网 ,点击免费使用,进行注册登录"></a>进入<a href="https://coding.net/" target="_blank" rel="noopener">Coding官网</a> ,点击免费使用,进行注册登录</h4></li></ul><img src="/2020/08/05/hexo%E9%83%A8%E7%BD%B2%E5%88%B0Coding/codingLogin.png" alt="codingLogin" style="zoom:35%;" class="article-img"><ul><li><h4 id="创建项目-选择DevOps项目，创建项目"><a href="2020/08/05/hexo部署到Coding#创建项目-选择DevOps项目，创建项目" class="headerlink" title="创建项目 选择DevOps项目，创建项目"></a>创建项目 选择DevOps项目，创建项目</h4></li><li><h4 id="配置公钥"><a href="2020/08/05/hexo部署到Coding#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h4><ul><li><p>配置 SSH 公钥方法与 GitHub方式差不多。点击头像-&gt;【个人设置】-&gt;【SSH公钥】-&gt;【新增公钥】</p></li><li><p>名称随便起。获取id_rsa.pub   </p></li><li><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /Users/a/.ssh  <span class="token function">cat</span> id_rsa.pub </code></pre></li><li><img src="/2020/08/05/hexo%E9%83%A8%E7%BD%B2%E5%88%B0Coding/sshPublicKey.png" alt="sshPublicKey" style="zoom:30%;"></li><li><p><strong>ps:</strong>选择永久有效，若提示危险操作，需要填写密码，就填写注册的Coding的密码，若注册是没设置，在个人设置服务密码里面可以进行设置。</p></li><li><p>验证SSH是否通过：</p></li><li><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@e.coding.net<span class="token comment" spellcheck="true">## 有如下提示，说明配置成功</span><span class="token comment" spellcheck="true">## Coding 提示: Hello wyohoxtan与小伙伴们, You've connected to Coding.net via SSH. This is a personal key.</span><span class="token comment" spellcheck="true">## wyohoxtan与小伙伴们，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥.</span></code></pre></li></ul></li><li><h4 id="配置hexo的-config-xml文件"><a href="2020/08/05/hexo部署到Coding#配置hexo的-config-xml文件" class="headerlink" title="配置hexo的_config.xml文件"></a>配置hexo的_config.xml文件</h4><ul><li><p>点击新建项目，代码 ssh  复制：<a href="mailto:git@e.coding.net" target="_blank" rel="noopener">git@e.coding.net</a>:wyohoxtanblog/wyohoxtanblog/wyohoxtanblog.git</p></li><li><p><img src="/2020/08/05/hexo%E9%83%A8%E7%BD%B2%E5%88%B0Coding/CodingRep.png" alt="CodingRep" class="article-img"></p></li><li><pre class=" language-xml"><code class="language-xml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:     github: git@github.com:wyohoxtan/wyohoxtan.github.io.git     coding: git@e.coding.net:wyohoxtanblog/wyohoxtanblog/wyohoxtanblog.git  branch: master</code></pre></li><li><p>配置完，执行以下命令</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre></li><li><p>查看代码，在代码仓库中查看</p></li></ul></li><li><h4 id="静态网站"><a href="2020/08/05/hexo部署到Coding#静态网站" class="headerlink" title="静态网站"></a>静态网站</h4><ul><li><p>点击持续部署 -&gt; 静态网站 -&gt; 新建： </p></li><li><p>网站名随便取一个</p><img src="/2020/08/05/hexo%E9%83%A8%E7%BD%B2%E5%88%B0Coding/DeployMaster.png" alt="DeployMaster" style="zoom:30%;"></li><li><p>自定义域名（有域名者） </p><ul><li>点击右上角的设置</li><li>进行域名绑定处理</li></ul><img src="/2020/08/05/hexo%E9%83%A8%E7%BD%B2%E5%88%B0Coding/diyWWW.png" alt="diyWWW" style="zoom:30%;"></li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;wyohoxtanBlog&quot;&gt;&lt;a href=&quot;http://82u0q0.coding-pages.com/&quot;&gt;wyohoxtanBlog&lt;/a&gt;&lt;a href=&quot;2020/08/05/hexo部署到Coding#wyohoxtanBlog&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://82u0q0.coding-pages.com/categories/Hexo/"/>
    
    
      <category term="coding" scheme="http://82u0q0.coding-pages.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>知识杂记</title>
    <link href="http://82u0q0.coding-pages.com/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/"/>
    <id>http://82u0q0.coding-pages.com/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/</id>
    <published>2020-08-03T06:27:42.000Z</published>
    <updated>2020-08-18T02:19:58.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Welcome-to-my-miscellany">Welcome to my miscellany!<a href="2020/08/03/知识杂记#Welcome-to-my-miscellany"></a></h3><h1 id="Quick-Start">Quick Start<a href="2020/08/03/知识杂记#Quick-Start"></a></h1><h3 id="Mac解决终端显示乱码">Mac解决终端显示乱码<a href="2020/08/03/知识杂记#Mac解决终端显示乱码"></a></h3><p>※ 打开终端的偏好设置</p><p>※ 描述文件 —&gt; Basic —&gt; 高级 —&gt; 文本编码 改为Unicode（UTF-8）</p><h3 id="Yaml与Yml的区别">Yaml与Yml的区别<a href="2020/08/03/知识杂记#Yaml与Yml的区别"></a></h3><p><font color="red">*</font> YML文件格式是YAML (YAML Aint Markup Language)编写的文件格式</p><p>   More info: <a href="http://blog.sina.com.cn/s/blog_53ab41fd0102whll.html" target="_blank" rel="noopener">参考链接</a></p><h3 id="Tomcat手动启动JavaWeb项目">Tomcat手动启动JavaWeb项目<a href="2020/08/03/知识杂记#Tomcat手动启动JavaWeb项目"></a></h3><p>※ 将javaWeb项目打包成war，存放在Tomcat的webapps文件夹中</p><p>※ 配置Tomcat的conf下的server.xml,context.xml文件</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--  server.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localhost<span class="token punctuation">"</span></span>  <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webapps<span class="token punctuation">"</span></span>            <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Valve</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.valves.AccessLogValve<span class="token punctuation">"</span></span> <span class="token attr-name">directory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logs<span class="token punctuation">"</span></span>             <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localhost_access_lo g.<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.txt<span class="token punctuation">"</span></span>             <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%h %l %u %t &amp;quot;%r&amp;quot; %s %b<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span>  <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/war名<span class="token punctuation">"</span></span> <span class="token attr-name">reloadable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Host</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- context.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Resource</span> <span class="token attr-name">driverClassName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>           <span class="token attr-name">maxActive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">maxIdle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">maxWait</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span>           <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc/cplh<span class="token punctuation">"</span></span>           <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                     <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XXX<span class="token punctuation">"</span></span>           <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.sql.DataSource<span class="token punctuation">"</span></span>           <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/pcmdb?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>注：docbase是web应用和本地路径，path是tomcat访问这个应用的URL路径</p><h3 id="Mysql替换Oracle中的to-number">Mysql替换Oracle中的to_number<a href="2020/08/03/知识杂记#Mysql替换Oracle中的to-number"></a></h3><pre class=" language-mysql"><code class="language-mysql">两种方式：cast(value as type) 、 convert(value,type)select cast(numA as unsigned int) /*整型*/select cast(numA as decimal(10,1)) /*浮点型*/ps：（10,1）代表数字共十位，小数点后两一位。</code></pre><p>###MySQL、Oracle中的Between and</p><pre class=" language-bash"><code class="language-bash">mysql ,oracle 中的Between and 均是包含边界eg:select * from info_customer where cus_id between 2 and 4<span class="token punctuation">;</span><span class="token punctuation">(</span>实质 也等于  <span class="token keyword">select</span> * from info_customer where cus_id  <span class="token operator">>=</span>2 and  cus_id <span class="token operator">&lt;=</span>4<span class="token punctuation">)</span>结果 2,3,4</code></pre><h3 id="Eclipse-Git-冲突处理">Eclipse Git 冲突处理<a href="2020/08/03/知识杂记#Eclipse-Git-冲突处理"></a></h3><p>1、通过 fetch，pull将代码从远程git仓库拉到本地</p><img src="/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/fetchToPullLocal.png" alt="fetchToPullLocal" style="zoom:75%;" class="article-img"><p><img src="/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/pullLocal.png" alt="pullLocal" class="article-img"></p><ul><li>① 只更新 “远程服务器 –&gt; 本地服务器” 简称(Fetch)</li><li>② 更新后，当前更新的项目与Git Repositories都会有类似一个向下的箭头，这代表“远程服务器”有东西更新到本地仓库，具体数量就是箭头隔壁的数字</li><li>③ 远程服务器 –&gt; 本地服务器” 与 “ 本地服务器 –&gt; 本地代码” 都执行 简称(Pull)</li></ul><p>2、提交代码</p><ul><li>Commit : “ 本地代码 –&gt; 本地服务器”</li><li>Push :  “本地服务器 –&gt; 远程服务器” </li></ul><p>3、先修改完代码还没有commit，在执行Fetch,那你还没有feel到代码冲突。</p><ul><li><p>I.只要你commit到本地服务器，IDE编译器就自动告诉你，已经冲突，要求你立刻解决。</p></li><li><p>II.如果你比较任性的话。直接想Commit And Push, IDE编译器也会很任性的回复你这样的图</p></li></ul><img src="/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/push.png" alt="push" style="zoom:75%;" class="article-img"><ul><li>应该要执行一下 Pull ，把 刚才Fetch 的代码植入”本地代码”，会存在冲突</li><li>若执意Push代码，提示：Repository state ： Conflicts</li><li>解决办法：<ul><li>通过定位当前冲突代码，执行 team -&gt; merge Tool -&gt; 进行代码的修改，解决冲突</li><li>若修改后，还存在冲突表示，执行  team -&gt; Add to Index  告诉IDE 已解决冲突</li><li>再进行 commit 或 commit and push 均可</li></ul></li></ul><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="PostgreSQL-表空间">PostgreSQL 表空间<a href="2020/08/03/知识杂记#PostgreSQL-表空间"></a></h3><p><a href="https://www.cnblogs.com/yanshw/p/11351136.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanshw/p/11351136.html</a></p><h3 id="Mac-状态栏收缩软件-vanilla">Mac 状态栏收缩软件 vanilla<a href="2020/08/03/知识杂记#Mac-状态栏收缩软件-vanilla"></a></h3><p><a href="https://matthewpalmer.net/vanilla/" target="_blank" rel="noopener">https://matthewpalmer.net/vanilla/</a></p><pre class=" language-bash"><code class="language-bash">$ vanilla</code></pre><h3 id="Eclipse启动存在相关问题">Eclipse启动存在相关问题<a href="2020/08/03/知识杂记#Eclipse启动存在相关问题"></a></h3><p>1、One of the two will be used. Which one is undefined.</p><pre class=" language-bash"><code class="language-bash">问题：objc<span class="token punctuation">[</span>6040<span class="token punctuation">]</span>: Class JavaLaunchHelper is implemented <span class="token keyword">in</span> both /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/bin/java <span class="token punctuation">(</span>0x10e0f04c0<span class="token punctuation">)</span> and /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/libinstrument.dylib <span class="token punctuation">(</span>0x10f1174e0<span class="token punctuation">)</span>. One of the two will be used. Which one is undefined.通过eclipse中的项目的java build path 中设置 jdk版本，选定 默认jdk版本</code></pre><h3 id="Npm更新存储问题">Npm更新存储问题<a href="2020/08/03/知识杂记#Npm更新存储问题"></a></h3><ul><li><p>mac安装报错Error: EACCES: permission denied, access ‘/usr/local/lib/node_modules<img src="/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/npmUpdateException.png" alt="npmUpdateException" style="zoom:50%;"></p></li><li><p>原因: 执行命令行命令时没有获得管理员权限</p></li><li><p>解决方案：在命令行前面添加sudo获取管理员权限，输入管理员密码就行</p></li></ul><h3 id="Mac替代xshell的工具">Mac替代xshell的工具<a href="2020/08/03/知识杂记#Mac替代xshell的工具"></a></h3><ul><li><p>Royal TSX</p></li><li><p><a href="https://www.royalapps.com/ts/mac/download" target="_blank" rel="noopener">https://www.royalapps.com/ts/mac/download</a></p></li><li><p>下载安装后，在偏好里选择plugin 添加组件</p><ul><li>termial</li><li>File Transfer</li></ul></li><li><img src="/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/installplugin.png" alt="installplugin" style="zoom:35%;"></li><li><p>File 创建 Document,保存</p></li><li><p>在文件夹下，添加termial</p></li><li><img src="/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/createTerminal.png" alt="createTerminal" style="zoom:30%;"></li><li><p>设置用户名密码</p></li><li><img src="/2020/08/03/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/inputRootAndPwd.png" alt="inputRootAndPwd" style="zoom:30%;"></li><li><p>设置 File Transfer 。和Terminal一样</p></li></ul><h3 id="查看Linux硬盘大小，内存等">查看Linux硬盘大小，内存等<a href="2020/08/03/知识杂记#查看Linux硬盘大小，内存等"></a></h3><ul><li><strong>查看CPU核数</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /proc/cpuinfo <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"cpu cores"</span> <span class="token operator">|</span> <span class="token function">uniq</span></code></pre><ul><li><strong>查看内存总数</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">grep</span> MemTotal</code></pre><ul><li><strong>查看硬盘相关情况</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">df</span> -h </code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Welcome-to-my-miscellany&quot;&gt;Welcome to my miscellany!&lt;a href=&quot;2020/08/03/知识杂记#Welcome-to-my-miscellany&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h1 id=&quot;Quick-Start&quot;&gt;
      
    
    </summary>
    
    
      <category term="Miscellany" scheme="http://82u0q0.coding-pages.com/categories/Miscellany/"/>
    
    
      <category term="杂记" scheme="http://82u0q0.coding-pages.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>InstallAnywhere打包web单机版</title>
    <link href="http://82u0q0.coding-pages.com/2020/01/03/InstallAnywhere%E6%89%93%E5%8C%85web%E5%8D%95%E6%9C%BA%E7%89%88/"/>
    <id>http://82u0q0.coding-pages.com/2020/01/03/InstallAnywhere%E6%89%93%E5%8C%85web%E5%8D%95%E6%9C%BA%E7%89%88/</id>
    <published>2020-01-03T07:37:30.000Z</published>
    <updated>2020-08-17T06:55:07.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="InstallAnywhere打包web">InstallAnywhere打包web<a href="2020/01/03/InstallAnywhere打包web单机版#InstallAnywhere打包web"></a></h3><p><code>InstallAnywhere,web</code></p><hr><h5 id="一、准备工作">一、准备工作<a href="2020/01/03/InstallAnywhere打包web单机版#一、准备工作"></a></h5><p>1、下载InstallAnywhere2020，并安装</p><ul><li><p>① 注册，下载地址：<a href="https://resources.flexera.com/web/www/landing/eval-download-installanywhere.html?id=IA-PRE（21天试用期）" target="_blank" rel="noopener">https://resources.flexera.com/web/www/landing/eval-download-installanywhere.html?id=IA-PRE（21天试用期）</a></p></li><li><p>② 安装</p></li></ul><p>2、下载JDK1.8，并安装</p><p>3、下载MySQL8 免安装</p><p>4、下载Tomcat8.5 免安装</p><p>5、本地创建文件夹，将当前的jdk，mysql，Tomcat复制到当前文件夹中</p><h5 id="二、创建Project">二、创建Project<a href="2020/01/03/InstallAnywhere打包web单机版#二、创建Project"></a></h5><p>※ 打开InstallAnywhere 2020，建立Basic Project Template，选择Advanced Designer,设置Title，Name等</p><ol><li><p>Project – info ：填写安装程序标题，安装文件名称，产品名称，其他项目可不填写。</p></li><li><p>Project – Description：填写产品描述、开发商、开发商主页、邮件等。</p></li><li><p>Installer UI – Look&amp;Feel：自定义安装界面、标题、标题颜色等。</p></li><li><p>Organization：组织机构信息，尚未研究。</p></li><li><p>Pre – install ：安装前准备，可以自定义安装步骤，修改各个步骤的标题及内容。</p></li><li><p>Install ：至关重要的一步，首先准备好你要打包的文件（tomcat免安装版、mysql免安装版、jdk）</p></li></ol><p>※ 设置本地语言</p><ul><li>Project -&gt; Locales -&gt; 选择需要的本地化语言</li></ul><h5 id="三、设置环境变量">三、设置环境变量<a href="2020/01/03/InstallAnywhere打包web单机版#三、设置环境变量"></a></h5><p>Install -&gt;，按钮Add Action…&gt;Set System Environment Variable&gt;Add &gt;，</p><p>设置JAVA_HOME和CATALINA_HOME,CATALINA_DIR,PATH 四个系统环境变量。其中<code>$USER_INSTALL_DIR$</code>表示用户选择的安装路径。</p><pre class=" language-bash"><code class="language-bash">JAVA_HOME  <span class="token variable">$USER_INSTALL_DIR</span>$\jdk1.8CATALINA_HOME <span class="token variable">$USER_INSTALL_DIR</span>$\tomcat8.5CATALINA_DIR <span class="token variable">$USER_INSTALL_DIR</span>$\tomcat8.5\binPATH  <span class="token variable">$USER_INSTALL_DIR</span>$\jdk1.8\bin<span class="token punctuation">;</span><span class="token variable">$USER_INSTALL_DIR</span>$\mysql8\bin<span class="token punctuation">;</span><span class="token variable">$USER_INSTALL_DIR</span>$\tomcat8.5\bin<span class="token punctuation">;</span>C:\Windows\System32 </code></pre><p>将jdk,tomcat,mysql 通过按钮Add Files…添加进来放在 User Install Folder直接目录下</p><h5 id="四、注册服务">四、注册服务<a href="2020/01/03/InstallAnywhere打包web单机版#四、注册服务"></a></h5><p>1、安装免安装mysql</p><ul><li><p>在本地下载完成mysql后，解压，进行初始化处理，并创建数据库以及对应的表</p><ul><li>初始化mysql</li><li>修改mysql登录密码</li><li>创建数据库</li><li>创建表</li></ul><blockquote><ul><li><p>当前解压版mysql无data文件夹(存放数据的文件夹，无或者内容不对会启动不成功)，无my.ini文件</p></li><li><p>通过创建my.ini文件</p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span># 设置3306端口<span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span># 设置mysql的安装目录<span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span> D:\ProjectJKTY-2017\mysql8.0</span># 设置mysql数据库的数据的存放目录<span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span> D:\ProjectJKTY-2017\mysql8.0\data</span># 允许最大连接数<span class="token constant">max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统<span class="token constant">max_connect_errors</span><span class="token attr-value"><span class="token punctuation">=</span>10</span># 服务端使用的字符集默认为UTF8<span class="token constant">character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span># 创建新表时将使用的默认存储引擎<span class="token constant">default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span># 默认使用“mysql_native_password”插件认证<span class="token constant">default_authentication_plugin</span><span class="token attr-value"><span class="token punctuation">=</span>mysql_native_password</span><span class="token selector">[mysql]</span># 设置mysql客户端默认字符集<span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token selector">[client]</span># 设置mysql客户端连接服务端时默认使用的端口<span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span></code></pre></li><li><p>通过进入mysql路径下，执行 <code>mysqld --initialize</code> 生成data文件夹及其相关内容</p></li><li><p>执行mysql的服务安装 ： <code>mysqld --install</code></p></li><li><p>执行启动mysql操作 ： `net start mysql ``</p><ul><li><p>注：第一次登陆MYSQL时，会提示要求输入初始密码，这是考虑安全因素，命令：</p><p><code>mysqld --initialize</code>会随机生成密码。</p></li><li><p>初始密码在data文件夹下的xxx.err文件中，可以用记事本打开，用ctrl+f 查找功能找到如下一行记录：</p><p>[Note] A temporary password is generated for root@localhost: NZ+uhXPq1zN.</p><p>其中NZ+uhXPq1zN.即为初始密码（注意.号不要漏了）</p><p>进入后可以用如下命令修改，这里密码改为root：</p></li></ul></li><li><pre class=" language-mysql"><code class="language-mysql">ALTER USER 'root'@'localhost' IDENTIFIED BY 'RootXXX';</code></pre></li><li><p>进行mysql的数据库，数据库数据导入操作（按照installAnywhere中的mysql安装步骤走）</p><ul><li><p>创建mysql数据库</p><pre class=" language-mysql"><code class="language-mysql">mysql8\bin\mysql -uroot -pRootXXX< \mysql8\create.sql</code></pre></li></ul></li></ul><ul><li><p>将已有数据库数据导入到mysql数据库中</p><pre class=" language-mysql"><code class="language-mysql">mysql8\bin\mysql -hlocalhost  -uroot -pRootXXX pcmdb < \mysql8\testJkty.sqlmysql8\bin\mysql -hlocalhost  -uroot -pRootXXX pcmdb < \mysql8\jktyView.sql</code></pre></li></ul></blockquote></li><li><p>添加按钮Add Action…&gt;Motify Text File-Single File&gt;Add&gt;,然后在Installed file选中mysql安装目录下的my.in(如果没有这个文件，请先创建这样一个文件，内容为空),其中Additional Text选中第一个prepend,在文本框中输入:</p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>basedir <span class="token operator">=</span> <span class="token variable">$USER_INSTALL_DIR</span>$\mysql8datadir <span class="token operator">=</span> <span class="token variable">$USER_INSTALL_DIR</span>$\mysql8\datadefault-character-set <span class="token operator">=</span> utf8set-variable<span class="token operator">=</span>max_connections<span class="token operator">=</span>1000<span class="token punctuation">[</span>WinMySQLAdmin<span class="token punctuation">]</span>Server<span class="token operator">=</span><span class="token variable">$USER_INSTALL_DIR</span>$\mysql5.0\bin\mysqld-nt.exeuser<span class="token operator">=</span>root<span class="token punctuation">[</span>client<span class="token punctuation">]</span>port<span class="token operator">=</span>3306user<span class="token operator">=</span>root</code></pre><p>将该Motify Text File-Single File移动到Panel: Install Complete后面。</p><p>2、注册mysql服务：</p><ul><li><p>在Post-install中，addAction 选择”Execute Script/Batch file” 在Comment中取名为”注册MySQL服务”，在Script中写入</p><pre class=" language-bash"><code class="language-bash">Call <span class="token string">"<span class="token variable">$USER_INSTALL_DIR</span>$/mysql8/bin/mysqld"</span> -remove   Call <span class="token string">"<span class="token variable">$USER_INSTALL_DIR</span>$/mysql8/bin/mysqld"</span> -install  </code></pre></li></ul><p>3、启动mysql：</p><ul><li>在Post-install中，addAction 选择”Execute Script/Batch file” 在Comment中取名为”启动MySQL”，在Script中写入</li></ul><pre class=" language-bash"><code class="language-bash">net start mysql</code></pre><p>4、启动Tomcat</p><ul><li>在Post-install中，addAction 选择”Execute Script/Batch file” 在Comment中取名为”启动Tomcat”，在Script中写入</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token variable">$USER_INSTALL_DIR</span>$/tomcat8.5/bin/startup.bat</code></pre><p>5、complete</p><p>相关安装action：</p><p><img src="/2020/01/03/InstallAnywhere%E6%89%93%E5%8C%85web%E5%8D%95%E6%9C%BA%E7%89%88/installAnywhere%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png" alt="installAnywhere安装过程" class="article-img"></p><h5 id="相关安装问题汇总：">相关安装问题汇总：<a href="2020/01/03/InstallAnywhere打包web单机版#相关安装问题汇总："></a></h5><p>① mysql服务无法安装，无法启动相关服务</p><ul><li>win10 彻底删除mysql</li></ul><pre class=" language-bash"><code class="language-bash">1. 停止MySQL服务　　开始 -<span class="token operator">></span> 所有应用 -<span class="token operator">></span> Windows管理工具 -<span class="token operator">></span> 服务，将MySQL服务停止。2. 卸载mysql server　　控制面板\所有控制面板项\程序和功能，将mysql server卸载掉。3. 将MySQL安装目录下的MySQL文件夹删除（我的安装目录是C:\Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\MySQL）4. 运行“regedit”文件，打开注册表。　　删除<span class="token variable"><span class="token variable">`</span>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL<span class="token variable">`</span></span>文件夹　　删除<span class="token variable"><span class="token variable">`</span>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL<span class="token variable">`</span></span>文件夹。　　删除<span class="token variable"><span class="token variable">`</span>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL<span class="token variable">`</span></span>的文件夹。　　如果没有相应的文件夹，就不用删除了。5. 删除C盘下的“C:\ProgramData\MySQL ”文件夹，如果删除不了则用360粉碎掉即可，　　该programData文件默认是隐藏的，设置显示后即可见，或者直接复制 C:\ProgramData 到地址栏回车即可进入！将整个MySQL文件夹删除掉。。。6. 开始 -<span class="token operator">></span> 所有应用 -<span class="token operator">></span> Windows管理工具 -<span class="token operator">></span> 服务　　如果已经将MySQL卸载，但通过“开始 -<span class="token operator">></span> 所有应用 -<span class="token operator">></span> Windows管理工具 -<span class="token operator">></span> 服务”查看到MySQL服务仍然残留在系统服务里。又不想改服务名，改怎么办呢。只要在CMD里输入一条命令就可以将服务删除：　　sc delete mysql //这里的mysql是你要删除的服务名, 这样一来服务就被删除了。重装MySQL数据库了！！！</code></pre><p>② dsName(JNDI):jdbc/cplhERROR! null</p><ul><li>在Context.xml 中配置 数据库相关信息，server.xml中不做数据库的配置</li></ul><p><img src="/2020/01/03/InstallAnywhere%E6%89%93%E5%8C%85web%E5%8D%95%E6%9C%BA%E7%89%88/contentXML%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.png" alt="contentXML配置信息" class="article-img"></p><p><img src="/2020/01/03/InstallAnywhere%E6%89%93%E5%8C%85web%E5%8D%95%E6%9C%BA%E7%89%88/serverXML%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.png" alt="serverXML配置信息" class="article-img"></p><p>③  在mysql命令行下执行sql文件</p><p> <a href="https://blog.csdn.net/qq_36501591/article/details/80354924" target="_blank" rel="noopener">https://blog.csdn.net/qq_36501591/article/details/80354924</a></p><h5 id="指导材料：">指导材料：<a href="2020/01/03/InstallAnywhere打包web单机版#指导材料："></a></h5><ul><li><a href="https://blog.csdn.net/number_89757/article/details/80643865" target="_blank" rel="noopener">https://blog.csdn.net/number_89757/article/details/80643865</a></li><li><a href="https://www.cnblogs.com/martin-roger/p/5912271.html" target="_blank" rel="noopener">https://www.cnblogs.com/martin-roger/p/5912271.html</a></li><li><a href="https://www.cnblogs.com/S-E-P/archive/2010/01/10/2045078.html" target="_blank" rel="noopener">https://www.cnblogs.com/S-E-P/archive/2010/01/10/2045078.html</a></li><li><a href="https://blog.csdn.net/ljz2009y/article/details/7707237" target="_blank" rel="noopener">https://blog.csdn.net/ljz2009y/article/details/7707237</a></li><li><a href="https://blog.csdn.net/y19910825/article/details/53740045" target="_blank" rel="noopener">https://blog.csdn.net/y19910825/article/details/53740045</a></li><li><a href="https://wenku.baidu.com/view/db30494233d4b14e8424684d.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/db30494233d4b14e8424684d.html</a></li><li><a href="https://www.taodocs.com/p-301026194.html" target="_blank" rel="noopener">https://www.taodocs.com/p-301026194.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;InstallAnywhere打包web&quot;&gt;InstallAnywhere打包web&lt;a href=&quot;2020/01/03/InstallAnywhere打包web单机版#InstallAnywhere打包web&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Instal
      
    
    </summary>
    
    
      <category term="InstallAnyWhere" scheme="http://82u0q0.coding-pages.com/categories/InstallAnyWhere/"/>
    
    
      <category term="web单机版" scheme="http://82u0q0.coding-pages.com/tags/web%E5%8D%95%E6%9C%BA%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>闲潭杂记</title>
    <link href="http://82u0q0.coding-pages.com/2019/12/29/%E9%97%B2%E6%BD%AD%E6%9D%82%E8%AE%B0/"/>
    <id>http://82u0q0.coding-pages.com/2019/12/29/%E9%97%B2%E6%BD%AD%E6%9D%82%E8%AE%B0/</id>
    <published>2019-12-29T03:05:01.000Z</published>
    <updated>2020-08-17T06:53:10.265Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闲散文章随笔">闲散文章随笔<a href="2019/12/29/闲潭杂记#闲散文章随笔"></a></h3><hr><p>《六朝志怪》</p><p>​    开篇 李贺《神弦》</p><p>​    所谓六朝： 三国，晋，宋，齐，梁，陈</p><p>​    逸史所谓何？书中有言：继续活在人们口头上的传说一旦被记录下来，就成为了具有浓厚小说意味的逸史</p><hr><p>我爱你，不光是因为你的样子，还因为和你在一起时我的样子；我爱你不光是因为你为我而做的事，还因为，为了你，我能做的成的事；我爱你，因为你能唤出我最真的那部分；我爱你，因为你穿过我的心灵的旷野，如同阳光透过水晶般容易。</p><hr><p>随笔：</p><p>​      近来，日益消退的疫疾，以及满是损人利己的举措，让本就烦闷的内心又增雾霾。说好的在家办公，说好的有效处理相关工作问题，也愈发地坐立不安，心神不宁。老是走神的自己，无法平复的积怨，让一切又变得那么的磕磕绊绊，无法顺畅，进而陷入到一种死循环的陷进中，难以自持。</p><p>​      生活好像总是这般，生下来，活下去，真够艰难。每个人心中的那杆秤，总是被人心压得狂摆不止，岌岌可危。道德的，法制的，经济的，文化的，思想的。该表达的，该陈述的，该倾诉的，该讨论的，该接纳的，好像都变得寡淡无味，不可自知。</p><p>​      乖乖做好自己就好。理清楚自己的内心，理清未来所需前往的地方，坚强武装好自我，坚定脚步，一步一步走过去，与爱的人。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;闲散文章随笔&quot;&gt;闲散文章随笔&lt;a href=&quot;2019/12/29/闲潭杂记#闲散文章随笔&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;《六朝志怪》&lt;/p&gt;
&lt;p&gt;​    开篇 李贺《神弦》&lt;/p&gt;
&lt;p&gt;​    所谓六朝： 三国，晋，宋，齐，梁，陈&lt;/p&gt;
&lt;p&gt;​
      
    
    </summary>
    
    
      <category term="闲潭" scheme="http://82u0q0.coding-pages.com/categories/%E9%97%B2%E6%BD%AD/"/>
    
    
      <category term="随笔" scheme="http://82u0q0.coding-pages.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo_inside博客主题优化</title>
    <link href="http://82u0q0.coding-pages.com/2019/12/10/hexo-inside%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <id>http://82u0q0.coding-pages.com/2019/12/10/hexo-inside%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</id>
    <published>2019-12-10T13:10:31.000Z</published>
    <updated>2020-08-17T07:03:39.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-inside主题优化">Hexo inside主题优化<a href="2019/12/10/hexo-inside博客主题优化#Hexo-inside主题优化"></a></h3><p><code>hexo inside 优化</code> </p><hr><h4 id="hexo系列问题">hexo系列问题<a href="2019/12/10/hexo-inside博客主题优化#hexo系列问题"></a></h4><h6 id="※-部署到github时会删掉README文件">※ 部署到github时会删掉README文件<a href="2019/12/10/hexo-inside博客主题优化#※-部署到github时会删掉README文件"></a></h6><p>​    △ 分析：</p><blockquote><p> ① 执行<code>hexo g</code>后，会把source文件里的.md格式的文件渲染为html文件并放到public下面；</p><p> ② 继续执行<code>hexo d</code>后，会将public下面的所有文件提交到对应的XXX.github.io仓库中；</p><p> ③ 由于本地public文件夹无README.md文件，在提交public文件时，github会认为你把README.md文件      删掉了，同时github也会删掉仓库里的README.md文件</p></blockquote><p>   △ 解决：</p><blockquote><p>① 在本地source文件夹内创建一个 README.md</p><p>② 修改Hexo根目录下的_config.yml文件，将skip_render参数的值设置为README.md</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> README.md//  为什么需要设置这一步呢？//  因为你执行hexo g命令时，hexo会默认将source文件里的所有md文件渲染为html文件放到public中，//  同时README.md会被渲染为README.html文件放到public文件里//  加上这段设置，就是告诉hexo的解析器，你在渲染source文件里的md文件时，跳过README.md文件</code></pre></blockquote><h4 id="Inside主题改造">Inside主题改造<a href="2019/12/10/hexo-inside博客主题优化#Inside主题改造"></a></h4><h6 id="※-博客头像、简介、目录、链接、搜索、主题、字体、加载速度、评论、访问量">※ 博客头像、简介、目录、链接、搜索、主题、字体、加载速度、评论、访问量<a href="2019/12/10/hexo-inside博客主题优化#※-博客头像、简介、目录、链接、搜索、主题、字体、加载速度、评论、访问量"></a></h6><p><code>config.yml文件改造</code></p><p>​    <strong>△ 头像设置</strong></p><blockquote><p>① 在当前主题中source创建img文件夹，将自己头像照片存放到文件夹中</p><p>② 在主题配置文件 _config.yml 文件，设置以下值：</p><pre class=" language-yml"><code class="language-yml"># 头像urlavatar: /img/avatar.jpg favicon: /img/avatar.jpg</code></pre></blockquote><p>​    <strong>△ 目录设置</strong></p><p>  <strong>△ 设置添加rss ,github等链接</strong></p><blockquote><p>① 在目录下执行安装hexo插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-generator-feed</code></pre><p>② 在config.yml文件中添加插件信息</p><pre class=" language-yml"><code class="language-yml"># Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed</code></pre><p>③ 在theme目录下的config.yml文件中添加rss配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Set rss to false to disable feed link.</span><span class="token comment" spellcheck="true"># Leave rss as empty to use site's feed link.</span><span class="token comment" spellcheck="true"># Set rss to specific value if you have burned your feed already.</span><span class="token key atrule">rss</span><span class="token punctuation">:</span> /atom.xml</code></pre><p>④ 重新部署</p></blockquote><p>  <strong>△ 设置打赏模块</strong></p><blockquote><p>1、下载微信，支付宝的支付图片</p><p>2、将图片放入主题的img文件夹中</p><p>3、设置相应的属性，具体如下：</p><pre class=" language-yml"><code class="language-yml">reward:  # Text which shows at the top.  # 显示一句文案  text:  交个朋友啦 ☕ .  # wechatpay: /img/Wechat.jpg  # alipay: /img/Alipy.jpg  # Payment Methods  # 支付方式列表，注意是数组  # qrcode, url and text must be set at least one  # wechat, alipay, paypal and bitcoin has a built-in icon,  # use `name` to apply  methods:     # wechat、alipay、paypal、bitcoin 对应四种不同的图标和配色    # 此外的任何自定义名称，都需要在语言文件内增加相应的语言，    # 同时配色与 appearance.accent_color 一致    - name: wechat      # 二维码地址      qrcode: img/Wechat.jpg      # 显示一个链接      url: /img/Wechat.jpg      # 若设置了 url，则此值会显示为链接的文本，否则为一段普通文本      text: 🤝微信🤝      # 选中时的颜色      color: '#33CC00'      # qrcode、url 和 text 必须至少设置一项    - name: alipay      # 二维码地址      qrcode: img/Alipy.jpg      # 显示一个链接      url: /img/Alipy.jpg      # 若设置了 url，则此值会显示为链接的文本，否则为一段普通文本      text: 🤝支付宝🤝      # 选中时的颜色      color: '#00CCFF'</code></pre><p>注：当前的name中的，需要小写，是内置支付方式</p></blockquote><p>  <strong>△ 设置统计字数，访问量</strong></p><blockquote><p>问题思考：如何添加js引用</p><p>统计使用<strong>“不蒜子”</strong></p><p>如何处理hexo inside主题布局修改问题</p><p>分析：inside主题是通过AngularJS实现</p><p>① 通过vscode将inside文件夹打开</p><p>② 分析layout文件夹</p><p>通过分析研究 _config.xml 将相关不蒜子统计文件js配置处理添加到文件中</p><p><strong>1、支持通过安装 html-minifier、babel 和 terser 来实现代码压缩。</strong></p><ul><li><p>项目根目录执行（Hexo 根目录，非 themes/inside）：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> babel-core babel-preset-env html-minifier terser --save</code></pre></li></ul><p><strong>2、先进行脚本的安装，再使用不蒜子的页面</strong></p><p>安装方法：主题_config.xml配置文件 plugins 模块 插入 busuanzi.js</p><pre class=" language-xml"><code class="language-xml">_config.xml---------------------------------------------------------------------------------plugins:     - position: sidebar      template: |         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>#   # Global Inject scripts/styles    - //busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</code></pre><p>在 _config.xml 文件里找到 footer 下的 custom，写入相关的HTML代码，如：</p><pre class=" language-xml"><code class="language-xml">_config.xml---------------------------------------------------------------------------------footer:# Custom text.  # 于最后一行添加自定义内容  custom: &lt;span id= "busuanzi_container_site_uv" style ='display:none'>Total <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> visitors. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span id="busuanzi_container_site_pv" style = 'display:none'><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> Views<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> </code></pre><hr><p>安装过程的问题：</p><p>问题一：引用js的问题</p><ul><li>通过plugins模块中的Global Inject scripts/styles</li></ul><p>问题二：部署后，页面显示的访问量过大</p><ul><li>在本地是此有数据量过大问题，部署后就无当前问题</li></ul><p>附属链接：</p><p><a href="https://removeif.github.io/theme/不蒜子统计常见问题.html" target="_blank" rel="noopener">不蒜子统计常见问题</a></p></blockquote><p> <strong>△ 设置about，search</strong></p><ul><li><p>创建about分类文件夹 </p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">'about'</span> </code></pre></li><li><p>完善网页内容</p><ul><li>个人相关信息介绍</li></ul></li><li><p>创建分类 categories</p><ul><li><p><code>hexo new page categories</code></p></li><li><p>主题下的categories的index文件，添加type: “categories”到内容中</p></li><li><p>对应文章中添加categories</p><ul><li><p>在tag前添加 categories</p></li><li><pre class=" language-markdown"><code class="language-markdown">title: hexo_inside博客主题优化date: 2019-12-10 21:10:31categories: Hexotags: hexo主题优化</code></pre></li></ul></li></ul></li><li><p>search设置</p><ul><li><p>主题_config.xml中：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Search</span><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Display a quick search button in fab</span>  <span class="token comment" spellcheck="true"># 在页面右下角的 FAB 按钮里显示快捷搜索入口</span>  <span class="token key atrule">fab</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># Render a standalone searh page which can be configured in sidebar menu such as `Search: /search`</span>  <span class="token comment" spellcheck="true"># 额外生成 search 页面，可配置在 sidebar 导航，如 `Search: /search`</span>  <span class="token key atrule">page</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 以上两个入口必须至少设置一个，否则视为无效配置</span>  <span class="token comment" spellcheck="true"># Local search</span>  <span class="token comment" spellcheck="true"># 本地搜索，即生成本地 json 文件</span>  <span class="token key atrule">adapter</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># json 数据的范围，数组</span>    <span class="token key atrule">range</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> post      <span class="token punctuation">-</span> page  <span class="token comment" spellcheck="true">#   # json 数据的条目限制</span>  <span class="token comment" spellcheck="true">#   # 假如 `limit:1000`，同时有 800 篇 post，800 篇 page，则最终生成的数据包含：</span>  <span class="token comment" spellcheck="true">#   # 800 篇 post，200 篇 page</span>  <span class="token comment" spellcheck="true">#   # 缺省值 `10000`</span>    <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000</span>  <span class="token comment" spellcheck="true">#   # 搜索结果分页大小，缺省值 `10`</span>    <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token comment" spellcheck="true"># Custom search</span>  <span class="token comment" spellcheck="true"># 自定义搜索 API</span>  <span class="token comment" spellcheck="true"># adapter:</span>  <span class="token comment" spellcheck="true">#   # Used for pagination</span>  <span class="token comment" spellcheck="true">#   #搜索结果分页大小，缺省值 `10`</span>  <span class="token comment" spellcheck="true">#   per_page: 5</span>    <span class="token comment" spellcheck="true"># Optional</span>    <span class="token comment" spellcheck="true"># 显示 LOGO 图片，可选</span>    <span class="token key atrule">logo</span><span class="token punctuation">:</span> //cdn.worldvectorlogo.com/logos/algolia.svg  <span class="token comment" spellcheck="true">#   # 此配置项为构造完整的请求对象</span>    <span class="token key atrule">request</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#     # 接口 URL</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//APPLICATION_ID<span class="token punctuation">-</span>dsn.algolia.net/1/indexes/INDEX/query  <span class="token comment" spellcheck="true">#     # GET 或 POST，不区分大小写，缺省值 `GET`</span>      <span class="token key atrule">method</span><span class="token punctuation">:</span> post  <span class="token comment" spellcheck="true">#     # Available variables: :query, :per_page, :current</span>  <span class="token comment" spellcheck="true">#     # 请求参数，格式视 Content-Type 而定，支持的字符串插值有：</span>  <span class="token comment" spellcheck="true">#     # 搜索的字符串 `:query`</span>  <span class="token comment" spellcheck="true">#     # 分页大小 `:per_page`</span>  <span class="token comment" spellcheck="true">#     # 当前页 `:current`</span>      <span class="token key atrule">body</span><span class="token punctuation">:</span> <span class="token string">'{"query":":query","hitsPerPage":":per_page","page":":current"}'</span>  <span class="token comment" spellcheck="true">#     # 请求头</span>      <span class="token key atrule">headers</span><span class="token punctuation">:</span>        <span class="token key atrule">X-Algolia-API-Key</span><span class="token punctuation">:</span> API_KEY        <span class="token key atrule">X-Algolia-Application-Id</span><span class="token punctuation">:</span> APPLICATION_ID        <span class="token key atrule">Content-Type</span><span class="token punctuation">:</span> application/json; charset=UTF<span class="token punctuation">-</span><span class="token number">8</span>      <span class="token key atrule">keys</span><span class="token punctuation">:</span>        <span class="token key atrule">data</span><span class="token punctuation">:</span> hits        <span class="token key atrule">current</span><span class="token punctuation">:</span> page        <span class="token key atrule">total</span><span class="token punctuation">:</span> nbPage        <span class="token key atrule">hits</span><span class="token punctuation">:</span> nbHits        <span class="token key atrule">time</span><span class="token punctuation">:</span> processingTimeMS        <span class="token comment" spellcheck="true"># title 对应具体某一条的标题字段</span>        <span class="token key atrule">title</span><span class="token punctuation">:</span> _snippetResult.title.value        <span class="token comment" spellcheck="true"># title 对应具体某一条的内容字段</span>        <span class="token key atrule">content</span><span class="token punctuation">:</span> _snippetResult.content.value</code></pre></li><li><p>在hexo config.yml 文件中，修改URL</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//82u0q0.coding<span class="token punctuation">-</span>pages.com/</code></pre></li></ul></li></ul><p><strong>△ 使用 valine评论进行配置</strong></p><ul><li><p>配置_config.yml 中的 plugins中的valine</p></li><li><pre class=" language-xml"><code class="language-xml">    - /js/Valine.min.js    - /js/av-min.js    - position: comments      template: |        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vcomment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">          <span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#vcomment'</span><span class="token punctuation">,</span>            appId<span class="token punctuation">:</span> <span class="token string">'XXX'</span><span class="token punctuation">,</span>            appKey<span class="token punctuation">:</span> <span class="token string">'XXX'</span><span class="token punctuation">,</span>            path<span class="token punctuation">:</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>由于考虑到线上的valine的js存在访问加载等的相关问题，将线上js做成本地博客js</p><ul><li><p>将线上js 拷贝到本地theme -&gt; inside -&gt; source -&gt; js</p></li><li><pre class=" language-xml"><code class="language-xml">- //cdn1.lncld.net/static/js/3.0.4/av-min.js- //unpkg.com/valine/dist/Valine.min.js#将其替换成本地路径- /js/Valine.min.js- /js/av-min.js</code></pre></li></ul></li><li><p>valine 评论 需要配合 <a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a> 作为后端支持</p><ul><li>进入 <a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a> 官网，可通过GitHub账号注册，添加邮箱验证功能</li><li>进入后，创建应用，创建完后点击右上角设置</li><li><img src="/2019/12/10/hexo-inside%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/lendCloudSetting.png" alt="lendCloudSetting" style="zoom:50%;"></li><li>选择应用keys，当中的AppID ，AppKey即为Valine需要的ID，key</li><li><img src="/2019/12/10/hexo-inside%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/lendCloudKeys.png" alt="lendCloudKeys" style="zoom:30%;"></li><li>进入应用中心绑定你的个人博客域名</li><li><img src="/2019/12/10/hexo-inside%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/leanCloudWeb.png" alt="leanCloudWeb" style="zoom:30%;"></li><li><font color="red">*</font> ps:若没配置web安全域名，则会在博客下提示：Code 403: 访问被API域名白名单拒绝，请检查你的安全域名设置.</li><li>Lendcloud 存储中创建Commit class</li><li><img src="/2019/12/10/hexo-inside%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/lendCloudClass.png" alt="lendCloudClass" style="zoom:30%;"></li><li>Valine配置：</li><li>完成</li></ul></li><li><p>问题①：</p></li></ul><pre class=" language-bash"><code class="language-bash">Code 403: 访问被API域名白名单拒绝，请检查你的安全域名设置.</code></pre><p><font color="red">*</font> 解决：在leancloud的<code>应用&gt;设置&gt;安全中心&gt;Web安全域名</code>中只添加了新的自定义的域名即可解决该问题。</p><ul><li><p>问题②：</p><pre class=" language-js"><code class="language-js">TypeError<span class="token punctuation">:</span> Cannot read property <span class="token string">'hide'</span> <span class="token keyword">of</span> undefined    at r<span class="token punctuation">.</span>ErrorHandler <span class="token punctuation">(</span>Valine<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at r<span class="token punctuation">.</span>init <span class="token punctuation">(</span>Valine<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at <span class="token keyword">new</span> <span class="token class-name">r</span> <span class="token punctuation">(</span>Valine<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at <span class="token keyword">new</span> <span class="token class-name">i</span> <span class="token punctuation">(</span>Valine<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at <span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">1891</span></code></pre><p><font color="red">*</font> 解决：除了引用Valine.min.js 还需要将 Valine.Pure.min.js 填入到项目中</p><ul><li><del>相关js  <a href="https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/（存在问题）" target="_blank" rel="noopener">https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/（存在问题）</a></del></li><li>通过已有前辈的技能，说是需要将 valine中的language设置为 zh-cn，尝试后仍无效</li><li>应该还是Valine.min.js的版本的问题</li><li>替换现有的js （js/Valine.min.js）</li><li><strong><font color="red">update：</font></strong> 通过核实得知当前的hexo的 _config.xml 中的language设置为 zh-Hans，改为 zh-cn</li></ul></li></ul><p><strong>△ 添加代码高亮插件</strong></p><ul><li><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre></li><li><p>在根目录下_config.xml文件中添加设置</p></li><li><pre class=" language-xml"><code class="language-xml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'      theme: 'tomorrow'  line_number: false      custom_css:</code></pre></li></ul><p><strong>△ 添加WordCount文章统计</strong></p><ul><li><p>安装WordCount：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-wordcount</code></pre></li><li><p>分析：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 面临问题</span>1、如何将wordcount部署到inside的page中？2、如何有效起作用？<span class="token title important"><span class="token punctuation">##</span> 分析</span>1、inside主题中的文章layout部署2、wordcount插件如何更好的在layout中被引用3、layout加载机制，head，body等4、</code></pre></li></ul><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ wordcount(post.content) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ min2read(post.content) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全站总字数：{{ totalcount(site) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> </code></pre><p>*<font color="red">存在问题，待完善</font>*</p><h6 id="改造过程中的问题-Exception：">改造过程中的问题 Exception：<a href="2019/12/10/hexo-inside博客主题优化#改造过程中的问题-Exception："></a></h6><p><strong>1、config.yml文件在部署过程中，存在问题：duplicated mapping key at line 242, column -2307:</strong> </p><ul><li>在search模块中，设置 其一 adapter即可，不可设置两个</li></ul><p><strong>2、bad indentation of a mapping entry at line 330, column 3</strong></p><ul><li>缩进错误</li></ul><p><strong>3、无法加载Disqus</strong></p><ul><li>无法访问<code>//shortname.disqus.com/embed.js</code></li></ul><p><strong>4、添加gitment评论存在问题</strong></p><ul><li>[object ProgressEvent]  引用的js所涉及的服务器存在稳定问题</li><li>由于gitment评论一直存在网络问题</li><li>以及GitHub的官网访问速率问题导致的博客存在速率问题</li><li>将其替换成Valine</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo-inside主题优化&quot;&gt;Hexo inside主题优化&lt;a href=&quot;2019/12/10/hexo-inside博客主题优化#Hexo-inside主题优化&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;hexo inside 优化&lt;/code&gt; &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://82u0q0.coding-pages.com/categories/Hexo/"/>
    
    
      <category term="hexo主题优化" scheme="http://82u0q0.coding-pages.com/tags/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo_mac部署</title>
    <link href="http://82u0q0.coding-pages.com/2019/12/10/hexo_mac%E9%83%A8%E7%BD%B2/"/>
    <id>http://82u0q0.coding-pages.com/2019/12/10/hexo_mac%E9%83%A8%E7%BD%B2/</id>
    <published>2019-12-10T11:32:18.000Z</published>
    <updated>2020-08-17T06:54:38.579Z</updated>
    
    <content type="html"><![CDATA[<p>搭建个人博客（<a href="https://wyohoxtan.github.io/）" target="_blank" rel="noopener">https://wyohoxtan.github.io/）</a></p><p><code>mac hexo</code> </p><hr><h4 id="hexo介绍">hexo介绍<a href="2019/12/10/hexo_mac部署#hexo介绍"></a></h4><p>官网：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a> </p><p>※ hexo 可以理解为是基于node.js制作的一个博客工具 </p><p>※ hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。</p><p>※ 源码结构</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th>文件/文件夹</th><th align="left">说明</th></tr></thead><tbody><tr><td>_config.yml</td><td align="left">配置文件</td></tr><tr><td>public</td><td align="left">生成的静态文件，这个目录最终会发布到服务器</td></tr><tr><td>scaffolds</td><td align="left">一些通用的markdown模板</td></tr><tr><td>source</td><td align="left">编写的markdown文件，_drafts草稿文件，_posts发布的文章</td></tr><tr><td>themes</td><td align="left">博客的模板</td></tr></tbody></table></div></div><h4 id="hexo搭建博客的一般步骤">hexo搭建博客的一般步骤<a href="2019/12/10/hexo_mac部署#hexo搭建博客的一般步骤"></a></h4><pre class=" language-markdown"><code class="language-markdown">安装Node.js安装Git安装Hexo安装主题本地运行测试注册github并创建仓库部署到github中</code></pre><h4 id="环境配置">环境配置<a href="2019/12/10/hexo_mac部署#环境配置"></a></h4><p>※ 安装 Git，Node.js, hexo</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 检测是否已安装</span>node -v<span class="token function">git</span> --version<span class="token comment" spellcheck="true"># 未安装，进行node，git的安装</span><span class="token comment" spellcheck="true"># 第一种方法：</span><span class="token comment" spellcheck="true"># 1、执行以下命令安装homebrew</span>ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.github.com/mxcl/homebrew/go<span class="token variable">)</span></span>"</span><span class="token comment" spellcheck="true"># 2、执行以下命令安装git</span>brew <span class="token function">install</span> <span class="token function">git</span><span class="token comment" spellcheck="true"># 3、执行以下命令安装nodejs</span>brew <span class="token function">install</span> node<span class="token comment" spellcheck="true">#第二种方法：</span><span class="token comment" spellcheck="true">#1、先安装git</span><span class="token comment" spellcheck="true">#git安装包下载地址http://code.google.com/p/git-osx-installer/downloads/list</span><span class="token comment" spellcheck="true">#2、安装nodejs</span><span class="token comment" spellcheck="true">#依次执行以下命令：</span><span class="token function">git</span> clone https://github.com/joyent/node.git nodejs<span class="token function">cd</span> nodejs./configure<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p>※ 若已安装，执行安装hexo步骤</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>※创建自己博客的文件夹，初始化hexo博客信息</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在合适的目录下创建一个blog文件夹</span><span class="token function">mkdir</span> myBlog<span class="token comment" spellcheck="true"># 进入目录</span><span class="token function">cd</span> myBlog<span class="token comment" spellcheck="true"># 初始化目录</span>hexo init<span class="token comment" spellcheck="true">#开启本地服务 </span>hexo s<span class="token comment" spellcheck="true"># 通过浏览器访问：http://localhost:4000</span></code></pre><h4 id="本地博客关联GitHub仓库">本地博客关联GitHub仓库<a href="2019/12/10/hexo_mac部署#本地博客关联GitHub仓库"></a></h4><p>※ 创建GitHub账号及仓库</p><ul><li><p>进入<a href="https://github.com/" target="_blank" rel="noopener">官网</a>注册账号</p></li><li><p>点击右上角“+”，new responsitory 创建GitHub仓库</p><p><font color="red">*</font>创建的responsitory名称应与账号名一致（eg:wyohoxtan.github.io）,否则在deploy后，访问博客网址时会出现404错误</p></li></ul><p>※关联GitHub，免密提交</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 用你注册GitHub时的邮箱号，进行秘钥生成</span><span class="token function">cd</span> ~ssh-keygen -t rsa -C <span class="token string">"xxxxxxx@qq.com"</span><span class="token comment" spellcheck="true"># 系统就会生成一个隐藏文件夹.ssh</span><span class="token function">cd</span> .ssh<span class="token function">ls</span><span class="token comment" spellcheck="true"># 复制公钥</span>vim id_rsa.pub</code></pre><ul><li>进入GitHub网站，进入setting设置中</li></ul><img src="/2019/12/10/hexo_mac%E9%83%A8%E7%BD%B2/ssh_setting.png" alt="ssh—setting" style="zoom:50%;" class="article-img"><ul><li><img src="https://upload-images.jianshu.io/upload_images/3478485-92b2d4a66901907b.png" alt="ssh—setting" style="zoom:50%;"></li></ul><img src="https://upload-images.jianshu.io/upload_images/3478485-94a0d1a2f04727f6.png" alt="ssh—setting" style="zoom:50%;" class="article-img"><ul><li><p>验证是否成功</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">ssh</span> -T git@github.com</code></pre></li></ul><p>※ 找到本地博客文件夹myBlog中的_config.yml文件，修改配置（只换username即可）</p><img src="/2019/12/10/hexo_mac%E9%83%A8%E7%BD%B2/configymlPic.png" alt="config.yml图" style="zoom:50%;" class="article-img"><ul><li><p>安装 hexo-deployer-git插件(不按照，git同步不成功)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre></li><li><p>终端执行以下命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 清除</span>hexo clean<span class="token comment" spellcheck="true"># 产生静态网页</span>hexo g<span class="token comment" spellcheck="true"># 部署到GitHub page上</span>hexo d</code></pre></li></ul><p>※ 通过<a href="http://username.github.io进行访问（eg:[闲潭个人博客](https://wyohoxtan.github.io/archives)）" target="_blank" rel="noopener">http://username.github.io进行访问（eg:[闲潭个人博客](https://wyohoxtan.github.io/archives)）</a></p><h4 id="常见问题分析">常见问题分析<a href="2019/12/10/hexo_mac部署#常见问题分析"></a></h4><p>1、hexo搭建Github博客上传后，网页显示404问题解决方案</p><p>分析：两种原因： ① 创建的GitHub仓库名称和GitHub账号的用户名称不同，导致无法获取。具体分析步骤可参考<a href="https://blog.csdn.net/dajian790626/article/details/78595684" target="_blank" rel="noopener">此链接</a></p><p>​                        ② 配置config.yml文件时，type: git中间必须有个空格！！！（书写格式问题）</p><p>2、配置的时候 hexo d 后报错”ERROR Deployer not found: git“</p><p>解决方法：安装插件hexo-deployer-git即可</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>3、Permanently added the RSA host key for IP address ‘52.74.223.119’ to the list of known hosts.</p><p>解决：<a href="https://blog.csdn.net/zhoucheng05_13/article/details/52831703" target="_blank" rel="noopener">https://blog.csdn.net/zhoucheng05_13/article/details/52831703</a></p><p>4、<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>: Permission denied (publickey).fatal: Could not read from remote repository.</p><p>原因：客户端与服务端的ssh key不匹配</p><p>解决：删除GitHub中的ssh秘钥，重新本地生成后设置到GitHub秘钥中</p><p>5、同步过程中存在问题:</p><img src="/2019/12/10/hexo_mac%E9%83%A8%E7%BD%B2/git_error.png" alt="git_error" style="zoom:50%;" class="article-img"><p>解决：按照上述提示，输入 </p><pre class=" language-bash"><code class="language-bash"> <span class="token function">git</span> config --global user.email <span class="token string">"you@example.com"</span> <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span></code></pre><p><strong>6、编写博客上传后，本地图片无法在GitHub上显示</strong></p><p>※ 修改config.yml文件配置：将文件中的post_asset_folder置为true</p><img src="/2019/12/10/hexo_mac%E9%83%A8%E7%BD%B2/createFolderAndSource.png" alt="upload_pic" style="zoom:50%;" class="article-img"><p>※ 根目录下执行：插件安装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>※ 创建博客文件后，会同时生成文件名相同的文件夹名称，将需要使用到的资源文件存放到本文件夹内</p><p>※ 书写博客中的图片文件路径 </p><img src="/2019/12/10/hexo_mac%E9%83%A8%E7%BD%B2/pic_path.png" alt="upload_pic" style="zoom:50%;" class="article-img"><p>上述操作后，仍存在图片无法显示的问题:</p><ul><li>通过F12，得知当前的图片路径无法加载，具体原因是文件名存在空格等非法字符，导致图片路径存在问题</li><li>在进行本博客的编写过程中，出现的各类资源文件信息，尽量全部存放到由hexo自动生成的同名文件夹中</li></ul><p>7、中文乱码的问题：</p><p>※ 修改config.yml文件，设置 language值   </p><p>​    anguage: zh-Hans 或者 anguage: zh-CN </p><p>​    <font color="red">*</font>取决于你的主题theme目录下的language目录下有zh-Hans.yml还是zh-CN.yml</p><p>※ 编辑器编码确定</p><h4 id="主题更换">主题更换<a href="2019/12/10/hexo_mac部署#主题更换"></a></h4><p>主题备选：从git或hexo官网中下载主题到本地</p><p><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:ikeq/hexo-theme-inside.gita href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:TriDiamond/hexo-theme-obsidian.git</p><p>修改本地主题：</p><p>  1、将下载的主题存放到本地myBlog -&gt; themes中(建议修改主题名，简单好用)</p><p>  2、修改config.yml文件中的theme值，使用主题名</p><h4 id="本地创建新博客">本地创建新博客<a href="2019/12/10/hexo_mac部署#本地创建新博客"></a></h4><p>  ※ 创建新博客文件：</p><pre><code> ```bash</code></pre><p>hexo new “newBlog”<br>     ```</p><p>  ※ 使用Markdown工具编写文件（eg:Typora(软件)，作业部落(在线)）</p><p>  ※ 通过 <code>hexo g</code>  <code>hexo d</code> 发布到GitHub中</p><h4 id="参考链接：">参考链接：<a href="2019/12/10/hexo_mac部署#参考链接："></a></h4><p><a href="https://www.jianshu.com/p/77db3862595c" target="_blank" rel="noopener">https://www.jianshu.com/p/77db3862595c</a></p><p><a href="https://www.jianshu.com/p/380290deb8f0" target="_blank" rel="noopener">https://www.jianshu.com/p/380290deb8f0</a></p><p><a href="https://www.jianshu.com/p/1c888a6b8297" target="_blank" rel="noopener">https://www.jianshu.com/p/1c888a6b8297</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;搭建个人博客（&lt;a href=&quot;https://wyohoxtan.github.io/）&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wyohoxtan.github.io/）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mac hexo&lt;/co
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://82u0q0.coding-pages.com/categories/Hexo/"/>
    
    
      <category term="myBlog" scheme="http://82u0q0.coding-pages.com/tags/myBlog/"/>
    
  </entry>
  
</feed>
